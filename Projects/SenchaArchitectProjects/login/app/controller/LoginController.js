/*
 * File: app/controller/LoginController.js
 *
 * This file was generated by Sencha Architect version 3.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.LoginController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            loginView: 'loginview',
            tabNavigationView: {
                autoCreate: true,
                forceCreate: true,
                selector: 'tabnavigationview',
                xtype: 'tabnavigationview'
            }
        },

        control: {
            "loginview": {
                signInCommand: 'OnSignInCommand'
            }
        }
    },

    OnSignInCommand: function(view, username, password) {
        debugger;
        console.log('Username: ' + username + '\n' + 'Password: ' + password);
        var me = this,
            loginView = me.getLoginView();
        if (username.length === 0 || password.length === 0) {
            loginView.showSignInFailedMessage('Please enter your username and password.');
            return;
        }


        loginView.setMasked({
            xtype: 'loadmask',
            message: 'Signing In.....'
        });


        //Ext.ns("Myapp");

        Ext.Ajax.request({
            url: 'http://localhost:8080/RestServer/j_spring_security_check',
            method: 'post',
            params: {
                j_username: username,
                j_password: password
            },
            success: function (response) {
                var loginResponse = Ext.JSON.decode(response.responseText);


                debugger;
                if (loginResponse.success == true) {
                    // The server will send a token that can be used throughout the app to confirm that the user is authenticated.
                    me.sessionToken = loginResponse.sessionToken;
                    me.signInSuccess(loginResponse);     //Just simulating success.
                } else {
                    me.signInFailure(loginResponse.errorMessage);
                }
            },

            failure: function (response) {
                me.sessionToken = null;
                me.signInFailure('Login failed. Please try again later.');
            }

        });

    },

    signInSuccess: function(loginResponse) {

        debugger;

        var loginStatusStore =Ext.getStore("LoginStatusStore");
        var loginStatusRecord = Ext.create("app.model.LoginStatus",
                                           {
                                               success: loginResponse.success,
                                               loggedIn: loginResponse.loggedIn,
                                               username: loginResponse.username
                                           });

        loginStatusStore.add(loginStatusRecord);

        var loginView = this.getLoginView();

        var tabNavigationView = this.getTabNavigationView();

        loginView.setMasked(false);

        Ext.Viewport.animateActiveItem(tabNavigationView, this.getSlideLeftTransition());
        debugger;
    },

    getSlideLeftTransition: function() {
        return { type: 'slide', direction: 'left' };
    },

    signInFailure: function(message) {
        var loginView = this.getLoginView();
        loginView.showSignInFailedMessage(message);
        loginView.setMasked(false);
    }

});